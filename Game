import java.awt.Graphics;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.Scanner;


/**
 * Cluedo is a guessing game involving 2-6 players trying to figure out where, how and who commited a murder. It involves players moving around the board and using
 * suggestions to figure how it happened. When someone is ready, they will make an accusation and attempt to win the game. If they are wrong, they will instead lose
 * and are not allowed another chance. The game is played until either everyone has lost, or someone has successfully figured out the crime.
 * Just a quick note, I do realise that I added game to as a parameter to alot fo the methods even though they are being called on a game object, but it doesn't matter
 * as there is only ever going to be one game object
 *
 * @author hildrecall and rehanmidh
 *
 */
public class Game {

	private Board board = null;
	List<Room> rooms;
	List<Weapon> weapons = new ArrayList<Weapon>();
	List<Person> people = new ArrayList<Person>();
	List<Player> players = new ArrayList<Player>();
	List<Room> allrooms = new ArrayList<Room>();
    List<Weapon> allweapons = new ArrayList<Weapon>();
    List<Person> allpersons = new ArrayList<Person>();
	//in order : Room - Weapon - Person
	Object murderinfo[] = new Object[3];
	Player winner;
	Player currentplayer;
	//current players actions
	boolean dicerolled = false;
	boolean suggestionplayed = false;
	boolean accustaionplayed = false;

	public Board getBoard() {
		return board;
	}
	/**
	 * The game object with where the game is run from. It keeps track of all the objects in and on the board, and has a min function where the game is played.
	 * All non-player object are initilised
	 */
	public Game(){
		initiliseBoard();
	    initiliseWeapons();
	    initilisePersons();
	    for(Room r : rooms) {
     	   allrooms.add(r);
        }
	    for(Weapon w : weapons) {
	  	   allweapons.add(w);
        }
        for(Person p : people) {
        	allpersons.add(p);
	    }
	    createMurderInfo(allrooms, allweapons, allpersons);
        placeWeapons();
	}

	/**
     * This method creates all the weapons and adds them into the game
    */
    public void initiliseWeapons() {
      List<Weapon> weapons = new ArrayList<Weapon>();
      weapons.add(new Weapon("Candlestick"));
      weapons.add(new Weapon("Dagger"));
      weapons.add(new Weapon("Lead Pipe"));
      weapons.add(new Weapon("Revolver"));
      weapons.add(new Weapon("Rope"));
      weapons.add(new Weapon("Spanner"));
      this.weapons = weapons;
	}
    /**
	  * This method creates all the charaters, and adds them into the game
	*/
	public void initilisePersons() {
	  List<Person> people = new ArrayList<Person>();
	  people.add(new Person("Miss Scarlet", board.getLocation(24, 7)));
	  people.add(new Person("Colonel Mustard", board.getLocation(17, 0)));
	  people.add(new Person("Mrs White", board.getLocation(0, 9)));
      people.add(new Person("Mr Green", board.getLocation(0, 14)));
      people.add(new Person("Mrs Peacock", board.getLocation(6, 23)));
      people.add(new Person("Professor Plum", board.getLocation(19, 23)));
      this.people = people;
      for(Person p : people) {
    	  p.location.getPersons().add(p);
      }
	}

	public void diceRoll(Player p) {
	/**
	 * Returns the sum of two random integers between 1-6
	 * @return an integer between 2 and 12
	 */
		if(dicerolled) {return;}
		Random rand = new Random();
		int rando = (rand.nextInt(6) + 1) + (rand.nextInt(6) + 1);
		p.setMovement(rando);
	}
	/**
	 * This method creates all the rooms, and then initilises the board using our list of rooms
	*/
	public void initiliseBoard() {
		List<Room> rooms  = new ArrayList<Room>();
		List<Location> kitchen = new ArrayList<Location>();
		List<Location> ballroom = new ArrayList<Location>();
		List<Location> conservatory = new ArrayList<Location>();
		List<Location> billiard = new ArrayList<Location>();
		List<Location> library = new ArrayList<Location>();
		List<Location> study = new ArrayList<Location>();
		List<Location> hall = new ArrayList<Location>();
		List<Location> lounge = new ArrayList<Location>();
		List<Location> dining = new ArrayList<Location>();
		rooms.add(new Room("Kitchen", kitchen));
		rooms.add(new Room("Ballroom", ballroom));
		rooms.add(new Room("Conservatory", conservatory));
		rooms.add(new Room("Billiard Room", billiard));
		rooms.add(new Room("Library", library));
		rooms.add(new Room("Study", study));
		rooms.add(new Room("Hall", hall));
		rooms.add(new Room("Lounge", lounge));
		rooms.add(new Room("Dining Room", dining));
		this.rooms = rooms;
		board = new Board(rooms);
	}
	/**
	 * Controls the movement phase of each of the players. Players move one step at a time while they mave movement steps available
	 * @param p The current player
	 */
	public void movePlayer(Player p, String m) {
	  if(p.getMovement() > 0) {
		  if(m == "North") {moveNorth(p);}
		  else if(m == "South") {moveSouth(p);}
		  else if(m == "East") {moveEast(p);}
		  else if(m == "West") {moveWest(p);}
	  }
	}
    /**
     * Controls player movement upwards. Checks whether their movement commands are valid/possible.
     * @param p The current player
     */
	public void moveNorth(Player p) {
		boolean move = true;
		int x = p.getLocation().x;
		int y = p.getLocation().y;
		//check if the location is accessable, and then if the room entering is correct
		if(!board.getLocation(x - 1, y).getAccess()) {
			move = false;
		}
		if(!enterRoom(p, "N") || !exitRoom(p, "N")) {
			move = false;
		}

		if(move) {
			p.setLocation(board.getLocation(x - 1, y));
			//remove person and player from location
			board.getLocation(x, y).getPlayers().remove(p);
			board.getLocation(x, y).getPersons().remove(p.getPerson());
			//add person and player to new location
			board.getLocation(x - 1, y).getPlayers().add(p);
			board.getLocation(x - 1, y).getPersons().add(p.getPerson());
			//move the person to the new position
			p.getPerson().setLocation(board.getLocation(x - 1, y));
			//reduce move count
			p.setMovement(p.getMovement() - 1);
		}
	}
	 /**
     * Controls player movement downwards. Checks whether their movement commands are valid/possible.
     * @param p The current player
     */
    public void moveSouth(Player p) {
    	boolean move = true;
		int x = p.getLocation().x;
		int y = p.getLocation().y;
		//check if the location is accessable, and then if the room entering is correct
		if(!board.getLocation(x + 1, y).getAccess()) {
			move = false;
		}
		if(!enterRoom(p, "S") || !exitRoom(p, "S")) {
			move = false;
		}

		if(move) {
			p.setLocation(board.getLocation(x + 1, y));
			//remove person and player from location
			board.getLocation(x, y).getPlayers().remove(p);
			board.getLocation(x, y).getPersons().remove(p.getPerson());
			//add person and player to new location
			board.getLocation(x + 1, y).getPlayers().add(p);
			board.getLocation(x + 1, y).getPersons().add(p.getPerson());
			//move the person to the new position
			p.getPerson().setLocation(board.getLocation(x + 1, y));
			//reduce move count
			p.setMovement(p.getMovement() - 1);
		}
	}
    /**
     * Controls player movement to the right. Checks whether their movement commands are valid/possible.
     * @param p The current player
     * @param distance How far the player can move
     * @return A boolean describing whether the player moved or not
     */
    public void moveEast(Player p) {
    	boolean move = true;
		int x = p.getLocation().x;
		int y = p.getLocation().y;
		//check if the location is accessable, and then if the room entering is correct
		if(!board.getLocation(x, y + 1).getAccess()) {
			move = false;
		}
		if(!enterRoom(p, "E") || !exitRoom(p, "E")) {
			move = false;
		}

		if(move) {
			p.setLocation(board.getLocation(x, y + 1));
			//remove person and player from location
			board.getLocation(x, y).getPlayers().remove(p);
			board.getLocation(x, y).getPersons().remove(p.getPerson());
			//add person and player to new location
			board.getLocation(x, y + 1).getPlayers().add(p);
			board.getLocation(x, y + 1).getPersons().add(p.getPerson());
			//move the person to the new position
			p.getPerson().setLocation(board.getLocation(x, y + 1));
			p.setMovement(p.getMovement() - 1);
		}
	}
    /**
     * Controls player movement to the left. Checks whether their movement commands are valid/possible.
     * @param p The current player
     * @param distance How far the player can move
     * @return A boolean describing whether the player moved or not
     */
    public void moveWest(Player p) {
    	boolean move = true;
		int x = p.getLocation().x;
		int y = p.getLocation().y;
		//check if the location is accessable, and then if the room entering is correct
		if(!board.getLocation(x, y - 1).getAccess()) {
			move = false;
		}
		if(!enterRoom(p, "W") || !exitRoom(p, "W")) {
			move = false;
		}

		if(move) {
			p.setLocation(board.getLocation(x, y - 1));
			//remove person and player from location
			board.getLocation(x, y).getPlayers().remove(p);
			board.getLocation(x, y).getPersons().remove(p.getPerson());
			//add person and player to new location
			board.getLocation(x, y - 1).getPlayers().add(p);
			board.getLocation(x, y - 1).getPersons().add(p.getPerson());
			//move the person to the new position
			p.getPerson().setLocation(board.getLocation(x, y - 1));
			p.setMovement(p.getMovement() - 1);
		}
	}
    /**
     * Checks whether a player is entering a room, and if so whether they are allowed too ( are they at the door)
     * @param p The current player
     * @param direction The direction they are heading in
     * @return True : The player is either allowed to enter the room, or is not entering a room
     *         False : The player is trying to enter a room, but is not allowed
     */
    public boolean enterRoom(Player p, String direction) {
    	int x = p.getLocation().x;
    	int y = p.getLocation().y;
    	if(direction == "N") {
    		if(p.getLocation().getRoom() == null && board.getLocation(x-1, y).getRoom() != null) {
    			//checks whether we are in the room and the new location isnt
    			if(!board.getLocation(x-1, y).getIsDoor()) {
    				//checks whether we are heading into a door
    				return false;
    			}
    		}
    	}
        if(direction == "S") {
        	if(p.getLocation().getRoom() == null && board.getLocation(x+1, y).getRoom() != null) {
    			if(!board.getLocation(x+1, y).getIsDoor()) {
    				return false;
    			}
    		}
    	}
        if(direction == "E") {
        	if(p.getLocation().getRoom() == null && board.getLocation(x, y +1).getRoom() != null) {
    			if(!board.getLocation(x, y+1).getIsDoor()) {
    				return false;
    			}
    		}
        }
        if(direction == "W") {
        	if(p.getLocation().getRoom() == null && board.getLocation(x, y -1).getRoom() != null) {
    			if(!board.getLocation(x, y-1).getIsDoor()) {
    				return false;
    			}
    		}
        }
        return true;
    }
    /**
     * Checks whether a player is exiting a room, and if so whether they are allowed too ( are they at the door)
     * @param p The current player
     * @param direction The direction they are heading in
     * @return True : The player is either allowed to exit the room, or is not exiting a room
     *         False : The player is trying to exit a room, but is not allowed
     */
    public boolean exitRoom(Player p, String direction) {
    	int x = p.getLocation().x;
    	int y = p.getLocation().y;
    	if(direction == "N") {
    		if(p.getLocation().getRoom() != null && board.getLocation(x-1, y).getRoom() == null) {
    			//checks whether we are in a room and the location in front isnt
    			if(!p.getLocation().getIsDoor()) {
    				//checks whther the location we are on is a door
    				return false;
    			}
    		}
    	}
        if(direction == "S") {
        	if(p.getLocation().getRoom() != null && board.getLocation(x+1, y).getRoom() == null) {
    			if(!p.getLocation().getIsDoor()) {
    				return false;
    			}
    		}
    	}
        if(direction == "E") {
        	if(p.getLocation().getRoom() != null && board.getLocation(x, y+1).getRoom() == null) {
    			if(!p.getLocation().getIsDoor()) {
    				return false;
    			}
    		}
        }
        if(direction == "W") {
        	if(p.getLocation().getRoom() != null && board.getLocation(x, y-1).getRoom() == null) {
    			if(!p.getLocation().getIsDoor()) {
    				return false;
    			}
    		}
        }
        return true;
    }
    /**
     * Randomly selects a room, weapon and person to be the murder information. Moves them into the murderinfo field
     * @param allrooms List of all of the rooms
     * @param allweapons List of all of the weapons
     * @param allpersons List of all of the people
     */
    public void createMurderInfo(List<Room> allrooms, List<Weapon> allweapons, List<Person> allpersons) {
    	Random rand = new Random();
    	murderinfo[0] = rooms.get(rand.nextInt(rooms.size()));
    	murderinfo[1] = weapons.get(rand.nextInt(weapons.size()));
    	murderinfo[2] = people.get(rand.nextInt(people.size()));
    	allrooms.remove(murderinfo[0]);
    	allweapons.remove(murderinfo[1]);
    	allpersons.remove(murderinfo[2]);
    }

    /**
     * Randomly doles out all of the rooms, weapons and persons to the players knowledge pools. In our version we don't actually have card objects, but instead use sets
     * to hold the knowledge each player has about the murder
     * @param allrooms List of the remaining non-murder rooms
     * @param allweapons List of the remaining non-murder weapons
     * @param allpersons List of the remaining non-murder persons
     */
    public void giveCards(List<Room> allrooms, List<Weapon> allweapons, List<Person> allpersons) {
    	Random rand = new Random();
    	int counter = 0;
    	int playerindex;
    	while(!allrooms.isEmpty()) {
    		playerindex = (counter % players.size());
    		Room room = allrooms.get(rand.nextInt(allrooms.size()));
    		//As objects are given out, we remove them from the remaining 'cardpool'
    		allrooms.remove(room);
    		players.get(playerindex).startrooms.add(room);
    		players.get(playerindex).knownrooms.add(room);
    		counter++;
    	}
    	while(!allweapons.isEmpty()) {
    		playerindex = (counter % players.size());
    		Weapon weapon = allweapons.get(rand.nextInt(allweapons.size()));
    		allweapons.remove(weapon);
    		players.get(playerindex).knownweapons.add(weapon);
    		players.get(playerindex).startweapons.add(weapon);
    		counter++;
    	}
    	while(!allpersons.isEmpty()) {
    		playerindex = (counter % players.size());
    		Person person = allpersons.get(rand.nextInt(allpersons.size()));
    		allpersons.remove(person);
    		players.get(playerindex).startpersons.add(person);
    		players.get(playerindex).knownpersons.add(person);
    		counter++;
    	}
    }
    /**
     * Randomly places the weapons between the rooms, putting them in the top left corner
     * @param game The current game being played
     */
    public void placeWeapons() {
    	Random rand = new Random();
    	for(Weapon w : weapons) {
    		while(w.getLocation() == null) {
    			Room possibleroom = rooms.get(rand.nextInt(7));
    			if(possibleroom.getWeapons().isEmpty()) {
    				possibleroom.getWeapons().add(w);
    				w.setLocation(possibleroom.getEntrys().get(0));
    			}
    		}
    	}
    }
    /**
     * Signals the end of a players turn. Will change the current player to the next player.
     */
    public void endTurn() {
      //check if the current player is at the end of the list
      if(players.indexOf(currentplayer) == (players.size() -1)) {
    	  currentplayer = players.get(0);
      }
      else {currentplayer = players.get(players.indexOf(currentplayer) + 1);}
    }

    /**
     * Creates a new player and adds it into our arraylist of players
     * @param name Name of the player
     */
    public void createNewPlayer(String name, Person person) {
    	Player newplayer = new Player(name, person);
        players.add(newplayer);
    }

    /**
     * A helper method for player creation. Produces a deep clone of the people arraylist in the game
     */
    public List<Person> clonePeople() {
    	List<Person> clone = new ArrayList<Person>();
    	for(int i = 0; i<people.size(); i++) {
    		Person newperson = new Person(people.get(0).getName(), people.get(0).getLocation());
    		clone.add(newperson);
    	}
    	return clone;
    }
    
    /**
     * Takes a players suggestion, and returns the first player that could refute your claim
     */
    public Player refuteSuggestion(String room, String weapon, String person) {
    	Player refutingplayer = null;
    	//loop through each player starting from the current player
    	for(int i = 1; i<players.size(); i++) {
    		int checkingindex = i;
    		checkingindex += players.indexOf(currentplayer);
    		System.out.println(players.indexOf(currentplayer));
    		if(checkingindex >= players.size() - 1) {checkingindex-=players.size() - 1;}
    		System.out.println(checkingindex);
    		//loop through each of the players card to find out whether they contain a card that can be used to refute
    		for(Room r :players.get(checkingindex).knownrooms) {
    			if(r.getName() == room) {refutingplayer = players.get(checkingindex);}
    		}
    		for(Weapon w :players.get(checkingindex).knownweapons) {
    			if(w.getName() == room) {refutingplayer = players.get(checkingindex);}
    		}
    		for(Person p :players.get(checkingindex).knownpersons) {
    			if(p.getName() == room) {refutingplayer = players.get(checkingindex);}
    		}
    		//if we find someone who can refute, we want to break the loop
    		if(refutingplayer != null) {break;}
    	}
    	return refutingplayer;
    }
    
    /**
     * Returns a object array of all the objects a player could choose to refuse a suggestion with
     * @param refuter The player refuting
     * @param room The room they are attempting to refute
     * @param weapon The weapon they are attempting to refute
     * @param person The person they are attempting to refute
     * @return
     */
    public Object[] giveRefuteOptions(Player refuter, String room, String weapon, String person) {
    	Object options[] = new Object[3];
    	int objectsize = 0;
    	for(Room r : refuter.knownrooms) {
			if(r.getName() == room) {
				options[objectsize] = r;
				objectsize++;
			}
		}
		for(Weapon w : refuter.knownweapons) {
			if(w.getName() == weapon) {
				options[objectsize] = w;
				objectsize++;	
			}
		}
		for(Person p : refuter.knownpersons) {
			if(p.getName() == person) {
				options[objectsize] = p;
				objectsize++;
			}
		}	
		Object returnoptions[] = new Object[objectsize];
		//making sure there is no empty space in the array
		for(int i = 0; i<objectsize; i++) {
			returnoptions[i] = options[i];
		}
		return returnoptions;
    }
    /**
     * Compares a players accusation to the murder information
     * @param room Accusation room
     * @param weapon Accusation weapon
     * @param person Accuastion person
     * @return boolean describing whether the player won the game
     */
    public boolean refuteAccusation(String room, String weapon, String person) {
    	String murderroom = ((Room) murderinfo[0]).getName();
    	String murderweapon = ((Weapon) murderinfo[1]).getName();
    	String murderperson = ((Person) murderinfo[2]).getName();
    	if(murderroom.equals(room) && murderweapon.equals(weapon) && murderperson.equals(person)) {return true;}
    	else {return false;}
    }
    /**
     * Adds a room to a players knowledge
     * @param r Room that they now know
     */
    public void addRoom(Room r) {
    	currentplayer.knownrooms.add(r);
    }
    /**
     * Adds a room to a players knowledge
     * @param r Room that they now know
     */
    public void addWeapon(Weapon w) {
    	currentplayer.knownweapons.add(w);
    }
    /**
     * Adds a room to a players knowledge
     * @param r Room that they now know
     */
    public void addPerson(Person p) {
    	currentplayer.knownpersons.add(p);
    }
