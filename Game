import java.util.ArrayList;
import java.util.List;
import java.util.Random;

public class Game {

	private Board board;
	List<Room> rooms;
	List<Weapon> weapons;
	List<Person> people;
	public Game(){}

	public void movePlayer(Player p, int diceroll, String direction, int steps) {
		for (int i = 0; i < diceroll; i++) {
			switch (direction) {
			case "north": p.moveNorth(steps);
			case "south": p.moveSouth(steps);
			case "east": p.moveEast(steps);
			case "west": p.moveWest(steps);
			}
		}
	}

    public void createPlayer(Person choice, String name, int number) {
    //Creates the indivdual players
      for (int i = 0; i < number; i++) {

      }
    }

    public void initiliseWeapons() {
    //creates the game weapons
      List<Weapon> weapons = new ArrayList<Weapon>();
      weapons.add(new Weapon("CandleStick"));
      weapons.add(new Weapon("Dagger"));
      weapons.add(new Weapon("Lead Pipe"));
      weapons.add(new Weapon("Revolver"));
      weapons.add(new Weapon("Rope"));
      weapons.add(new Weapon("Spanner"));
      this.weapons = weapons;
	}

	public void initilisePersons() {
	  //Creates the game characters
	  List<Person> people = new ArrayList<Person>();
	  people.add(new Person("Miss Scarlet", board.getLocation(24, 7)));
	  people.add(new Person("Colonel Mustard", board.getLocation(17, 0)));
	  people.add(new Person("Mrs. White", board.getLocation(0, 9)));
      people.add(new Person("Mr. Green", board.getLocation(0, 14)));
      people.add(new Person("Mrs. Peacock", board.getLocation(6, 23)));
      people.add(new Person("Professor Plum", board.getLocation(19, 23)));
      this.people = people;
	}

	public int diceRoll() {
	//Produces the sum of two random numbers between 1-6
		Random rand = new Random();
		return (rand.nextInt(6) + 1) + (rand.nextInt(6) + 1);
	}

	public void initiliseBoard() {
		//creates rooms and the board
		List<Room> rooms  = new ArrayList<Room>();
		List<Location> kitchen = new ArrayList<Location>();
		kitchen.add(board.getLocation(6, 4));
		List<Location> ballroom = new ArrayList<Location>();
		ballroom.add(board.getLocation(5, 8));
		ballroom.add(board.getLocation(7, 9));
		ballroom.add(board.getLocation(7, 14));
		ballroom.add(board.getLocation(5, 15));
		List<Location> conservatory = new ArrayList<Location>();
		conservatory.add(board.getLocation(4, 18));
		List<Location> billiard = new ArrayList<Location>();
		billiard.add(board.getLocation(9, 18));
		billiard.add(board.getLocation(12, 22));
		List<Location> library = new ArrayList<Location>();
		library.add(board.getLocation(14, 20));
		library.add(board.getLocation(16, 17));
		List<Location> study = new ArrayList<Location>();
		study.add(board.getLocation(21, 17));
		List<Location> hall = new ArrayList<Location>();
		hall.add(board.getLocation(20, 14));
		hall.add(board.getLocation(18, 12));
		hall.add(board.getLocation(18, 11));
		List<Location> lounge = new ArrayList<Location>();
		lounge.add(board.getLocation(19, 6));
		List<Location> dining = new ArrayList<Location>();
		dining.add(board.getLocation(15, 6));
		dining.add(board.getLocation(12, 7));
		rooms.add(new Room("Kitchen", kitchen));
		rooms.add(new Room("Ballroom", ballroom));
		rooms.add(new Room("Conservatory", conservatory));
		rooms.add(new Room("Billiard", billiard));
		rooms.add(new Room("Library", library));
		rooms.add(new Room("Study", study));
		rooms.add(new Room("Hall", hall));
		rooms.add(new Room("Lounge", lounge));
		rooms.add(new Room("Dining", dining));
		this.rooms = rooms;
		board = new Board(rooms);
	}

	//Various move commands
	public void moveNorth(Player p, int distance) {
		if (p.getLocation().getAccess()) {
			Location l = new Location(p.getLocation().x, p.getLocation().y - distance);
			p.setLocation(l);
		}
	}
    public void moveSouth(Player p, int distance) {
		if (p.getLocation().getAccess()) {
			Location l = new Location(p.getLocation().x, p.getLocation().y + distance);
			p.setLocation(l);
		}
	}
    public void moveEast(Player p, int distance) {
		if (p.getLocation().getAccess()) {
			Location l = new Location(p.getLocation().x + distance, p.getLocation().y);
			p.setLocation(l);
		}
	}
    public void moveWest(Player p, int distance) {
		if (p.getLocation().getAccess()) {
			Location l = new Location(p.getLocation().x - distance, p.getLocation().y);
			p.setLocation(l);
		}
	}

    public static void main(String[] args) {
	       Game game = new Game();
	       game.initiliseBoard();
	       game.initiliseWeapons();
	       game.initilisePersons();
		}
}
