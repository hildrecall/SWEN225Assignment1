import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.Scanner;

public class Game {

	private Board board;
	List<Room> rooms = new ArrayList<Room>();
	List<Weapon> weapons = new ArrayList<Weapon>();
	List<Person> people = new ArrayList<Person>();
	List<Player> players;
	Scanner input = new Scanner(System.in);
	//in order : Room - Weapon - Person
	Object murderinfo[] = new Object[3];

	public Game(){}

    public void initiliseWeapons() {
    //creates the game weapons
      List<Weapon> weapons = new ArrayList<Weapon>();
      weapons.add(new Weapon("CandleStick"));
      weapons.add(new Weapon("Dagger"));
      weapons.add(new Weapon("Lead Pipe"));
      weapons.add(new Weapon("Revolver"));
      weapons.add(new Weapon("Rope"));
      weapons.add(new Weapon("Spanner"));
      this.weapons = weapons;
	}

	public void initilisePersons() {
	  //Creates the game characters
	  List<Person> people = new ArrayList<Person>();
	  people.add(new Person("Miss Scarlet", board.getLocation(24, 7)));
	  people.add(new Person("Colonel Mustard", board.getLocation(17, 0)));
	  people.add(new Person("Mrs. White", board.getLocation(0, 9)));
      people.add(new Person("Mr. Green", board.getLocation(0, 14)));
      people.add(new Person("Mrs. Peacock", board.getLocation(6, 23)));
      people.add(new Person("Professor Plum", board.getLocation(19, 23)));
      this.people = people;
	}

	public int diceRoll() {
	//Produces the sum of two random numbers between 1-6
		Random rand = new Random();
		return (rand.nextInt(6) + 1) + (rand.nextInt(6) + 1);
	}

	public void initiliseBoard() {
		//creates rooms and the board
		List<Room> rooms  = new ArrayList<Room>();
		List<Location> kitchen = new ArrayList<Location>();
		kitchen.add(board.getLocation(6, 4));
		List<Location> ballroom = new ArrayList<Location>();
		ballroom.add(board.getLocation(5, 8));
		ballroom.add(board.getLocation(7, 9));
		ballroom.add(board.getLocation(7, 14));
		ballroom.add(board.getLocation(5, 15));
		List<Location> conservatory = new ArrayList<Location>();
		conservatory.add(board.getLocation(4, 18));
		List<Location> billiard = new ArrayList<Location>();
		billiard.add(board.getLocation(9, 18));
		billiard.add(board.getLocation(12, 22));
		List<Location> library = new ArrayList<Location>();
		library.add(board.getLocation(14, 20));
		library.add(board.getLocation(16, 17));
		List<Location> study = new ArrayList<Location>();
		study.add(board.getLocation(21, 17));
		List<Location> hall = new ArrayList<Location>();
		hall.add(board.getLocation(20, 14));
		hall.add(board.getLocation(18, 12));
		hall.add(board.getLocation(18, 11));
		List<Location> lounge = new ArrayList<Location>();
		lounge.add(board.getLocation(19, 6));
		List<Location> dining = new ArrayList<Location>();
		dining.add(board.getLocation(15, 6));
		dining.add(board.getLocation(12, 7));
		rooms.add(new Room("Kitchen", kitchen));
		rooms.add(new Room("Ballroom", ballroom));
		rooms.add(new Room("Conservatory", conservatory));
		rooms.add(new Room("Billiard", billiard));
		rooms.add(new Room("Library", library));
		rooms.add(new Room("Study", study));
		rooms.add(new Room("Hall", hall));
		rooms.add(new Room("Lounge", lounge));
		rooms.add(new Room("Dining", dining));
		this.rooms = rooms;
		board = new Board(rooms);
	}

	public void movePlayer(Player p, int diceroll) {
		//asks the player where/how far they would like to move until they run out of steps
		//maybe allow them to not move?
		while(diceroll>0){
			boolean move = false;
			System.out.println("Available steps : " + diceroll);
			System.out.println("Which direction would like to move in? (enter either N, S, E, W)");
			String direction = input.next();
			System.out.println("How far would you like to move?");
			int steps = Integer.parseInt(input.next());
			if(steps > diceroll) {
				System.out.println("Please enter a valid step count");
				continue;
			}
			switch (direction) {
			  case "N": move = moveNorth(p, steps);
			  case "S": move = moveSouth(p, steps);
			  case "E": move = moveEast(p, steps);
			  case "W": move = moveWest(p, steps);
			  default : System.out.println("Please enter a valid direction (enter either N, S, E, W)");
			}
			//only chagen total steps if the player actually moves
			if(move) {diceroll -= steps;}

		}
	}

	//Various move commands
	//Move commands will need to check every location the player wants to move to to make sure the location is accessable
	//Maybe a recursive method?
	public boolean moveNorth(Player p, int distance) {
		boolean move = true;
		int x = p.getLocation().x;
		int y = p.getLocation().y;
		for(int i = 1; i<= distance; i++) {
			//check if the location is accessable, and then if the room entering is correct
			if(!board.getLocation(x - i, y).getAccess()) {
				move = false;
			}
			if(!enterRoom(p, "N") || !exitRoom(p, "N")) {
				move = false;
			}
		}
		if(move) {p.setLocation(board.getLocation(x - distance, y));}
		return move;
	}
    public boolean moveSouth(Player p, int distance) {
    	boolean move = true;
		int x = p.getLocation().x;
		int y = p.getLocation().y;
		for(int i = 1; i<= distance; i++) {
			//check if the location is accessable, and then if the room entering is correct
			if(!board.getLocation(x + i, y).getAccess()) {
				move = false;
			}
			if(!enterRoom(p, "S") || !exitRoom(p, "S")) {
				move = false;
			}
		}
		if(move) {p.setLocation(board.getLocation(x + distance, y));}
		return move;
	}
    public boolean moveEast(Player p, int distance) {
    	boolean move = true;
		int x = p.getLocation().x;
		int y = p.getLocation().y;
		for(int i = 1; i<= distance; i++) {
			//check if the location is accessable, and then if the room entering is correct
			if(!board.getLocation(x, y + i).getAccess()) {
				move = false;
			}
			if(!enterRoom(p, "E") || !exitRoom(p, "E")) {
				move = false;
			}
		}
		if(move) {p.setLocation(board.getLocation(x, y + distance));}
		return move;
	}
    public boolean moveWest(Player p, int distance) {
    	boolean move = true;
		int x = p.getLocation().x;
		int y = p.getLocation().y;
		for(int i = 1; i<= distance; i++) {
			//check if the location is accessable, and then if the room entering is correct
			if(!board.getLocation(x, y - i).getAccess()) {
				move = false;
			}
			if(!enterRoom(p, "W") || !exitRoom(p, "W")) {
				move = false;
			}
		}
		if(move) {p.setLocation(board.getLocation(x, y - distance));}
		return move;
	}

    public boolean enterRoom(Player p, String direction) {
    	//checks if a player can enter a room
    	int x = p.getLocation().x;
    	int y = p.getLocation().y;
    	if(direction == "N") {
    		if(p.getLocation().getRoom() == null && board.getLocation(x-1, y) != null) {
    			if(!board.getLocation(x-1, y).getRoom().getEntrys().contains(p.getLocation())) {
    				return false;
    			}
    		}
    	}
        if(direction == "S") {
        	if(p.getLocation().getRoom() == null && board.getLocation(x+1, y) != null) {
    			if(!board.getLocation(x+1, y).getRoom().getEntrys().contains(p.getLocation())) {
    				return false;
    			}
    		}
    	}
        if(direction == "E") {
        	if(p.getLocation().getRoom() == null && board.getLocation(x, y +1) != null) {
    			if(!board.getLocation(x, y+1).getRoom().getEntrys().contains(p.getLocation())) {
    				return false;
    			}
    		}
        }
        if(direction == "W") {
        	if(p.getLocation().getRoom() == null && board.getLocation(x, y -1) != null) {
    			if(!board.getLocation(x, y-1).getRoom().getEntrys().contains(p.getLocation())) {
    				return false;
    			}
    		}
        }
        return true;
    }

    public boolean exitRoom(Player p, String direction) {
    	int x = p.getLocation().x;
    	int y = p.getLocation().y;
    	if(direction == "N") {
    		if(p.getLocation().getRoom() != null && board.getLocation(x-1, y) == null) {
    			if(!p.getLocation().getRoom().getEntrys().contains(board.getLocation(x-1, y))) {
    				return false;
    			}
    		}
    	}
        if(direction == "S") {
        	if(p.getLocation().getRoom() != null && board.getLocation(x+1, y) == null) {
    			if(!p.getLocation().getRoom().getEntrys().contains(board.getLocation(x+1, y))) {
    				return false;
    			}
    		}
    	}
        if(direction == "E") {
        	if(p.getLocation().getRoom() != null && board.getLocation(x, y+1) == null) {
    			if(!p.getLocation().getRoom().getEntrys().contains(board.getLocation(x, y+1))) {
    				return false;
    			}
    		}
        }
        if(direction == "W") {
        	if(p.getLocation().getRoom() != null && board.getLocation(x, y-1) == null) {
    			if(!p.getLocation().getRoom().getEntrys().contains(board.getLocation(x, y-1))) {
    				return false;
    			}
    		}
        }
        return true;
    }

    public void createMurderInfo(List<Room> allrooms, List<Weapon> allweapons, List<Person> allpersons) {
    	Random rand = new Random();
    	murderinfo[0] = rooms.get(rand.nextInt(rooms.size()));
    	murderinfo[1] = weapons.get(rand.nextInt(weapons.size()));
    	murderinfo[2] = people.get(rand.nextInt(people.size()));
    	allrooms.remove(murderinfo[0]);
    	allweapons.remove(murderinfo[1]);
    	allpersons.remove(murderinfo[2]);
    }
    public void createPlayers() {
    	//creates as many players as required
    	players = new ArrayList<Player>();
    	int count = 0;
    	while(count < 2 || count > 6) {
    	  System.out.println("How many players would you like? (between 2-6)");
    	  count = input.nextInt();
    	}
    	for(int i = 0; i<count; i++) {
    		players.add(new Player(people.get(i)));
    	}
    }
    
    public void giveCards(List<Room> allrooms, List<Weapon> allweapons, List<Person> allpersons) {
    	Random rand = new Random();
    	int counter = 0;
    	while(!allrooms.isEmpty()) {
    		Room room = allrooms.get(rand.nextInt(allrooms.size()));
    		allrooms.remove(room);
    		players.get(counter).knownrooms.add(room);
    		counter++;
    		//resets the counter so we will add the next room to the first player
    		if(counter == players.size()) {counter = 0;}
    	}
    	counter = 0;
    	while(!allweapons.isEmpty()) {
    		Weapon weapon = allweapons.get(rand.nextInt(allweapons.size()));
    		allweapons.remove(weapon);
    		players.get(counter).knownweapons.add(weapon);
    		counter++;
    		//resets the counter so we will add the next weapon to the first player
    		if(counter == players.size()) {counter = 0;}
    	}
    	counter = 0;
    	while(!allpersons.isEmpty()) {
    		Person person = allpersons.get(rand.nextInt(allpersons.size()));
    		allpersons.remove(person);
    		players.get(counter).knownpersons.add(person);
    		counter++;
    		//resets the counter so we will add the next person to the first player
    		if(counter == players.size()) {counter = 0;}
    	}
    }
    

    public static void main(String[] args) {
	       Game game = new Game();
	       game.initiliseBoard();
	       game.initiliseWeapons();
	       game.initilisePersons();
	       game.createPlayers();
	       List<Room> allrooms = game.rooms;
	       List<Weapon> allweapons = game.weapons;
	       List<Person> allpersons = game.people;
	       game.createMurderInfo(allrooms, allweapons, allpersons);
	       game.giveCards(allrooms, allweapons, allpersons);
	       //now we can begin the game
   }
}
