import java.awt.Color;
import java.awt.Graphics;
import java.util.List;
/**
 * The board looks after the locations the represent the different positions on the board. It holds a 2d array contains all the locations that make up the board. It is also
 * incharge of redrawing the board after every move.
 * @author hildrecall and rehanmidh
 *
 */

public class Board {
	private Location[][] board;

	/**
	 * The constructor. It creates all the locations, as well as sorting them into rooms and inaccessable areas.
	 * @param rooms A list of all the rooms on the board
	 */
	public Board(List<Room> rooms) {
		// initilising all the locations on the board, as well as any values those
		// loactions might have
		board = new Location[25][24];
		for (int i = 0; i < 25; i++) {
			for (int j = 0; j < 24; j++) {
				board[i][j] = new Location(i, j);
			}
		}
		// Kitchen
		for (int i = 1; i < 7; i++) {
			for (int j = 0; j < 6; j++) {
				board[i][j].setRoom(rooms.get(0));
				rooms.get(0).getEntrys().add(board[i][j]);
			}
		}
		board[6][4].setIsDoor(true);
		// Ballroom
		for (int i = 2; i < 8; i++) {
			for (int j = 8; j < 16; j++) {
				board[i][j].setRoom(rooms.get(1));
				rooms.get(1).getEntrys().add(board[i][j]);
			}
		}
		for (int j = 10; j < 14; j++) {
			board[2][j].setRoom(rooms.get(1));
			rooms.get(1).getEntrys().add(board[2][j]);
		}
		board[5][8].setIsDoor(true);
		board[7][9].setIsDoor(true);
		board[7][14].setIsDoor(true);
		board[5][15].setIsDoor(true);
		// Conservatory
		for (int i = 1; i < 6; i++) {
			for (int j = 18; j < 24; j++) {
				board[i][j].setRoom(rooms.get(2));
				rooms.get(2).getEntrys().add(board[i][j]);
			}
		}
		board[5][18].setRoom(null);
		rooms.get(2).getEntrys().remove(board[5][18]);
		board[4][18].setIsDoor(true);
		// Billiard
		for (int i = 8; i < 13; i++) {
			for (int j = 18; j < 24; j++) {
				board[i][j].setRoom(rooms.get(3));
				rooms.get(3).getEntrys().add(board[i][j]);
			}
		}
		board[9][18].setIsDoor(true);
		board[12][22].setIsDoor(true);
		// Library
		for (int i = 14; i < 19; i++) {
			for (int j = 17; j < 24; j++) {
				board[i][j].setRoom(rooms.get(4));
				rooms.get(4).getEntrys().add(board[i][j]);
			}
		}
		board[14][17].setRoom(null);
		board[18][17].setRoom(null);
		rooms.get(4).getEntrys().remove(board[14][17]);
		rooms.get(4).getEntrys().remove(board[18][17]);
		board[14][20].setIsDoor(true);
		board[16][17].setIsDoor(true);
		// Study
		for (int i = 21; i < 25; i++) {
			for (int j = 17; j < 24; j++) {
				board[i][j].setRoom(rooms.get(5));
				rooms.get(5).getEntrys().add(board[i][j]);
			}
		}
	    board[21][17].setIsDoor(true);
		// Hall
		for (int i = 18; i < 25; i++) {
			for (int j = 9; j < 15; j++) {
				board[i][j].setRoom(rooms.get(6));
				rooms.get(6).getEntrys().add(board[i][j]);
			}
		}
		board[20][14].setIsDoor(true);
	    board[17][11].setIsDoor(true);
		board[17][12].setIsDoor(true);
		// Lounge
		for (int i = 19; i < 25; i++) {
			for (int j = 0; j < 7; j++) {
				board[i][j].setRoom(rooms.get(7));
				rooms.get(7).getEntrys().add(board[i][j]);
			}
		}
		board[18][6].setIsDoor(true);
		// Dining Room
		for (int i = 9; i < 16; i++) {
			for (int j = 0; j < 8; j++) {
				board[i][j].setRoom(rooms.get(8));
				rooms.get(8).getEntrys().add(board[i][j]);
			}
		}
		board[14][6].setIsDoor(true);
		board[11][5].setIsDoor(true);
		board[9][5].setRoom(null);
		board[9][6].setRoom(null);
		board[9][7].setRoom(null);
		rooms.get(8).getEntrys().remove(board[9][5]);
		rooms.get(8).getEntrys().remove(board[9][6]);
		rooms.get(8).getEntrys().remove(board[9][7]);
		// Now for clean up/unaccessable zones
		for (int j = 0; j < 24; j++) {
			board[0][j].setAccess(false);
		}
		board[0][9].setAccess(true);
		board[0][14].setAccess(true);
		board[1][6].setAccess(false);
		board[1][17].setAccess(false);
		board[5][23].setAccess(false);
		board[7][23].setAccess(false);
		board[13][23].setAccess(false);
		board[14][23].setAccess(false);
		board[18][23].setAccess(false);
		board[20][23].setAccess(false);
		board[24][6].setAccess(false);
		board[24][8].setAccess(false);
		board[24][15].setAccess(false);
		board[24][17].setAccess(false);
		board[6][0].setAccess(false);
		board[8][0].setAccess(false);
		board[16][0].setAccess(false);
		board[18][0].setAccess(false);
	}

	public Location[][] getBoard() {
		return this.board;
	}

	public Location getLocation(int x, int y) {
		if (x > 24 || x < 0 || y > 23 || y < 0) {
			return null;
		}
		return board[x][y];
	}
}
