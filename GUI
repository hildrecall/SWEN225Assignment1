import java.awt.Graphics;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.JMenuBar;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.FlowLayout;

import javax.swing.JButton;
import javax.swing.SwingConstants;

import java.awt.GridLayout;
import javax.swing.JToolBar;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JSplitPane;
import java.awt.Insets;
import javax.swing.JTextPane;
import javax.swing.ButtonGroup;
import javax.swing.ImageIcon;

/**
 * This class will create the GUI and moniter the actions of the user(s). As an
 * abstract class it will be extended by our game, and the gameplay functions
 * will all be within game.
 *
 * @author hildrecall and rehanmidh
 *
 */
public class GUI extends JFrame {
    Game game;

	public GUI() {

		//creating the GUI
		JFrame frame = new JFrame();
		JPanel controls = new JPanel();

		//Creating top left text fields recording avaiable moves and current player
		JTextPane playertitle = new JTextPane();
		playertitle.setText("Player Number");
		JTextArea playernumber = new JTextArea();
		JTextPane movetitle = new JTextPane();
		movetitle.setText("Available Moves");
		JTextArea movenumber = new JTextArea();
		movenumber.setText("0");

		JPanel playerinfo = new JPanel();
		playerinfo.setMaximumSize(new Dimension(100, 60));
		playerinfo.setLayout(new GridLayout(4,1));
		playerinfo.add(playertitle);
		playerinfo.add(playernumber);
		playerinfo.add(movetitle);
		playerinfo.add(movenumber);

		//creating the action buttons (movement + suggestion/accusation)
		JPanel actions = new JPanel();
		actions.setMaximumSize(new Dimension(100, 60));
		actions.setLayout(new GridLayout(2,1));

		JButton suggestion = new JButton("Suggestion");
		JButton accusation = new JButton("Accusation");
		actions.add(suggestion);
		actions.add(accusation);

		JButton north = new JButton("\u2191");
		north.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent ev) {
				game.movePlayer(game.currentplayer, "North");
				redraw();
			}
		});
		JButton south = new JButton("\u2193");
		south.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent ev) {
				game.movePlayer(game.currentplayer, "North");
				redraw();
			}
		});
		JButton east = new JButton("\u2192");
		east.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent ev) {
				game.movePlayer(game.currentplayer, "North");
				redraw();
			}
		});
		JButton west = new JButton("\u2190");
		west.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent ev) {
				game.movePlayer(game.currentplayer, "North");
				redraw();
			}
		});
		JButton dice = new JButton("Dice");
		dice.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent ev) {
				game.diceRoll(game.currentplayer);
				redraw();
			}
		});
		dice.setIcon(new ImageIcon("dice.png"));
		JButton topright = new JButton("");
		topright.setIcon(new ImageIcon("hat.png"));
		topright.setEnabled(false);
		north.setPreferredSize(new Dimension(60, 60));
		south.setPreferredSize(new Dimension(60, 60));
		east.setPreferredSize(new Dimension(60, 60));
		west.setPreferredSize(new Dimension(60, 60));
		dice.setPreferredSize(new Dimension(60, 60));
		topright.setPreferredSize(new Dimension(60, 60));

        JPanel directions = new JPanel();
		directions.setMaximumSize(new Dimension(120, 90));
		directions.setLayout(new GridLayout(2, 3));
		directions.add(dice);
		directions.add(north);
		directions.add(topright);
		directions.add(west);
		directions.add(south);
		directions.add(east);
		controls.setLayout(new GridLayout(0, 3, 0, 0));

		controls.add(playerinfo);
		controls.add(directions);
		controls.add(actions);

		//creating the bottom display panels
		frame.getContentPane().add(controls, BorderLayout.NORTH);

		JSplitPane splitPane = new JSplitPane();
		frame.getContentPane().add(splitPane, BorderLayout.SOUTH);
		splitPane.setLayout(new FlowLayout());
		splitPane.setSize(200, 100);

        JPanel rpanel = new JPanel();
		splitPane.setRightComponent(rpanel);

		JPanel lpanel = new JPanel();
		splitPane.setLeftComponent(lpanel);
		splitPane.setDividerLocation(225);

		JPanel drawing = new JPanel();
		frame.getContentPane().add(drawing, BorderLayout.CENTER);

		//creating the menu bar
        JMenuBar menuBar = new JMenuBar();
        frame.setJMenuBar(menuBar);

        JMenu menu = new JMenu("Menu");
        menuBar.add(menu);
        JMenuItem startgame = new JMenuItem("Start Game");
        menu.add(startgame);
        JMenuItem endgame = new JMenuItem("End Game");
        menu.add(endgame);
        JMenuItem endturn = new JMenuItem("End Turn");
        menu.add(endturn);

        startgame.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent ev) {
				game = new Game();
				//need to add player initilisation - Dialog boxes
				//first initilise the possible choices latter on
				Object[] numofplayers = {2,3,4,5,6};
				List<Person> personoptions = game.clonePeople();
				//finds out how many players will be playing
				int choice = (Integer)JOptionPane.showInputDialog(frame,
					    "Welcome to Cluedo! How many people would like to play?	",
					    "Welcome!",
					    JOptionPane.PLAIN_MESSAGE,
					    null,
					    numofplayers,
					    2);
				for(int i = 0; i<choice; i++) {
					//for each player, allows them to select a name
					String name;
					JTextField entername = new JTextField();
					int namechoice = JOptionPane.showConfirmDialog(frame,
							entername,
							"Enter your name",
							JOptionPane.PLAIN_MESSAGE);
					if(namechoice == JOptionPane.OK_OPTION) {
						name = entername.getText();
					}
                    //then allows each player to select a person
					//creates a radio box that will add radio buttons depending on how many unchosen options there are
					ButtonGroup personselect = new ButtonGroup();
					for(int j = 0; j <personoptions.size(); j++) {
						JRadioButton button = new JRadioButton(personoptions.get(i).getName());
					}



					//game.createNewPlayer(name, person);
				}

				//game.redraw();
			}
		});

        endgame.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent ev) {
				//currently just exits the game
				game = null; //resets the game, should remove everything
				System.exit(0);
			}
		});

        endturn.addActionListener(new ActionListener() {
     			public void actionPerformed(ActionEvent ev) {
     				//currently just exits the game
     				game.endTurn();
     			}
     	});

        //finally set the program to visable
        frame.setVisible(true);
	}

	public static void main(String[] args) {
		new GUI();
	}
}
