import java.awt.Graphics;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.JMenuBar;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.FlowLayout;

import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.SwingConstants;

import java.awt.GridLayout;
import javax.swing.JToolBar;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.ActionEvent;
import javax.swing.JSplitPane;
import java.awt.Insets;
import javax.swing.JTextPane;
import javax.swing.ButtonGroup;
import javax.swing.ImageIcon;

/**
 * This class will create the GUI and moniter the actions of the user(s). The game is run from this class. The class itself represents the controller/view
 * parts, as the user both views and interacts with the GUI (as mentioned in lectures this is more of the modern style). But the model is completely held
 * within the rest of the classes (primarily game), and all the actual gameplay actions occur within those classes.
 *
 * @author hildrecall and rehanmidh
 *
 */
public class GUI extends JFrame {
    Game game;

	public GUI() {

		//creating the GUI
		JFrame frame = new JFrame();
		JPanel controls = new JPanel();

		//Creating top left text fields recording avaiable moves and current player
		JTextPane playertitle = new JTextPane();
		playertitle.setText("Player Number");
		JTextArea playernumber = new JTextArea();
		JTextPane movetitle = new JTextPane();
		movetitle.setText("Available Moves");
		JTextArea movenumber = new JTextArea();
		movenumber.setText("0");

		JPanel playerinfo = new JPanel();
		playerinfo.setMaximumSize(new Dimension(100, 60));
		playerinfo.setLayout(new GridLayout(4,1));
		playerinfo.add(playertitle);
		playerinfo.add(playernumber);
		playerinfo.add(movetitle);
		playerinfo.add(movenumber);

		//creating the action buttons (movement + suggestion/accusation)
		JPanel actions = new JPanel();
		actions.setMaximumSize(new Dimension(100, 60));
		actions.setLayout(new GridLayout(2,1));

		JButton suggestion = new JButton("Suggestion");
		suggestion.addActionListener(new ActionListener() {
 			public void actionPerformed(ActionEvent ev) {
 				//if they are not in a room, dont allow them to make a suggestion
 				if(game.currentplayer.getLocation().getRoom() == null) {return;}
 				//first asks for their suggestion
 				//String roomchoices[] = {"Kitchen", "Ballroom", "Conservatory", "Billiard Room", "Library", "Study", "Hall", "Lounge", "Dining Room"};
 				//JComboBox<String> suggestionroom = new JComboBox<String>(roomchoices);
 				String weaponchoices[] = {"Candlestick", "Dagger", "Lead Pipe", "Revolver", "Rope", "Spanner"};
 				JComboBox<String> suggestionweapon = new JComboBox<String>(weaponchoices);
 				String peoplechoices[] = {"Miss Scarlet", "Colonel Mustard", "Mrs White", "Mr Green", "Mrs Peacock", "Professor Plum"};
 				JComboBox<String> suggestionpeople = new JComboBox<String>(peoplechoices);
 				JPanel suggestionchoices = new JPanel();
 				//suggestionchoices.add(suggestionroom);
 				suggestionchoices.add(suggestionweapon);
 				suggestionchoices.add(suggestionpeople);
 				//display the options
 				JOptionPane.showConfirmDialog(frame,
						suggestionchoices,
						"Make your suggestion",
						JOptionPane.PLAIN_MESSAGE);
 				//find the chosen options and give them to game to figure out the rest
 				//String suggestroom = (String) suggestionroom.getSelectedItem();
 				String suggestweapon = (String) suggestionweapon.getSelectedItem();
 				String suggestperson = (String) suggestionpeople.getSelectedItem();
 				Player refuter = game.refuteSuggestion(game.currentplayer.getLocation().getRoom().getName(), suggestweapon, suggestperson);
 				//if we find someone who can refute, give them the choice of which card to refute with
 				//then give that knowledge to the suggesting player
 				if(refuter != null) {
 					Object options[] = game.giveRefuteOptions(refuter, game.currentplayer.getLocation().getRoom().getName(), suggestweapon, suggestperson);
 					//need to make an opbject array with the names, then drag the info from options
 					String optionnames[] = new String[options.length];
 					for(int i = 0; i<options.length; i++) {
 						//all objects have getName so it doesnt matter what we cast them too
 						if(options[i] instanceof Room) {
 							optionnames[i] = ((Room) options[i]).getName();
 						}
 						else if(options[i] instanceof Weapon) {
 							optionnames[i] = ((Weapon) options[i]).getName();
 						}
 						else {
 							optionnames[i] = ((Person) options[i]).getName();
 						}
 					}

 					String choice = (String)JOptionPane.showInputDialog(frame,
 						    "Which card would you like to choose?",
 						    "Choose",
 						    JOptionPane.PLAIN_MESSAGE,
 						    null,
 						    optionnames,
 						    null);
 					//discover what their choice was and add it into the players options
 					for(int i = 0; i<options.length; i++) {
 						if(options[i] instanceof Room) {
 							if(choice == ((Room) options[i]).getName()) {game.addRoom((Room) options[i]);}
 						}
 						else if(options[i] instanceof Weapon) {
 							if(choice == ((Weapon) options[i]).getName()) {game.addWeapon((Weapon) options[i]);}
 						}
 						else {
 							if(choice == ((Person) options[i]).getName()) {game.addPerson((Person) options[i]);}
 						}
 					}
 				}
 				//otherwise, let the player know that no one could refute
 				else {
 					JOptionPane.showMessageDialog(frame, "No one could refute your suggestion!");
 				}
 			}
 	    });

		JButton accusation = new JButton("Accusation");
		accusation.addActionListener(new ActionListener() {
 			public void actionPerformed(ActionEvent ev) {
 				//first asks for their suggestion
 				String roomchoices[] = {"Kitchen", "Ballroom", "Conservatory", "Billiard Room", "Library", "Study", "Hall", "Lounge", "Dining Room"};
 				JComboBox<String> accusationroom = new JComboBox<String>(roomchoices);
 				String weaponchoices[] = {"Candlestick", "Dagger", "Lead Pipe", "Revolver", "Rope", "Spanner"};
 				JComboBox<String> accusationweapon = new JComboBox<String>(weaponchoices);
 				String peoplechoices[] = {"Miss Scarlet", "Colonel Mustard", "Mrs White", "Mr Green", "Mrs Peacock", "Professor Plum"};
 				JComboBox<String> accusationperson = new JComboBox<String>(peoplechoices);
 				JPanel suggestionchoices = new JPanel();
 				suggestionchoices.add(accusationroom);
 				suggestionchoices.add(accusationweapon);
 				suggestionchoices.add(accusationperson);
 				//display the options
 				JOptionPane.showConfirmDialog(frame,
						suggestionchoices,
						"Make your accusation",
						JOptionPane.PLAIN_MESSAGE);
 				//find the chosen options and give them to game to figure out the rest
 				String suggestroom = (String) accusationroom.getSelectedItem();
 				String suggestweapon = (String) accusationweapon.getSelectedItem();
 				String suggestpeople = (String) accusationperson.getSelectedItem();
 				//compare your accusation to the actual murder info
 				boolean refuted = game.refuteAccusation(suggestroom, suggestweapon, suggestpeople);
 				if(refuted) {
 					JOptionPane.showMessageDialog(frame, "Congratulations " + game.currentplayer.getName() + ", you have won the game!");
 					//perhaps add some code to end the game??
 				}
 				else {
 					JOptionPane.showMessageDialog(frame, "Sorry " + game.currentplayer.getName() + ", but that was an incorrect guess");
 				    game.currentplayer.setCanPlay(false);
 				    //change to the next player if they get it wrong
 				    game.endTurn();
                }
 			}
 	    });
		actions.add(suggestion);
		actions.add(accusation);

		JButton north = new JButton("\u2191");
		north.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent ev) {
				game.movePlayer(game.currentplayer, "North");
				redraw(frame);
			}
		});
		JButton south = new JButton("\u2193");
		south.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent ev) {
				game.movePlayer(game.currentplayer, "North");
				redraw(frame);
			}
		});
		JButton east = new JButton("\u2192");
		east.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent ev) {
				game.movePlayer(game.currentplayer, "North");
				redraw(frame);
			}
		});
		JButton west = new JButton("\u2190");
		west.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent ev) {
				game.movePlayer(game.currentplayer, "North");
				redraw(frame);
			}
		});
		JButton dice = new JButton("Dice");
		dice.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent ev) {
				game.diceRoll(game.currentplayer);
			    movenumber.setText(game.currentplayer.getMovement() +"");
				redraw(frame);
			}
		});
		dice.setIcon(new ImageIcon("dice.png"));
		JButton topright = new JButton("");
		topright.setIcon(new ImageIcon("hat.png"));
		topright.setEnabled(false);
		north.setPreferredSize(new Dimension(60, 60));
		south.setPreferredSize(new Dimension(60, 60));
		east.setPreferredSize(new Dimension(60, 60));
		west.setPreferredSize(new Dimension(60, 60));
		dice.setPreferredSize(new Dimension(60, 60));
		topright.setPreferredSize(new Dimension(60, 60));

        JPanel directions = new JPanel();
		directions.setMaximumSize(new Dimension(120, 90));
		directions.setLayout(new GridLayout(2, 3));
		directions.add(dice);
		directions.add(north);
		directions.add(topright);
		directions.add(west);
		directions.add(south);
		directions.add(east);
		controls.setLayout(new GridLayout(0, 3, 0, 0));

		controls.add(playerinfo);
		controls.add(directions);
		controls.add(actions);

		//creating the bottom display panels
		frame.getContentPane().add(controls, BorderLayout.NORTH);

		JSplitPane splitPane = new JSplitPane();
		frame.getContentPane().add(splitPane, BorderLayout.SOUTH);
		splitPane.setLayout(new FlowLayout());
		splitPane.setSize(200, 100);

        JPanel rpanel = new JPanel();
		splitPane.setRightComponent(rpanel);
		JTextArea rpaneltext = new JTextArea();
		rpanel.add(rpaneltext);

		JPanel lpanel = new JPanel();
		splitPane.setLeftComponent(lpanel);
		splitPane.setDividerLocation(500);
		JTextArea lpaneltext = new JTextArea();
		lpanel.add(lpaneltext);

		JPanel drawing = new JPanel();
		frame.getContentPane().add(drawing, BorderLayout.CENTER);

		//creating the menu bar
        JMenuBar menuBar = new JMenuBar();
        frame.setJMenuBar(menuBar);

        JMenu menu = new JMenu("Menu");
        menuBar.add(menu);
        JMenuItem startgame = new JMenuItem("Start Game");
        menu.add(startgame);
        JMenuItem endgame = new JMenuItem("End Game");
        menu.add(endgame);
        JMenuItem endturn = new JMenuItem("End Turn");
        menu.add(endturn);

        startgame.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent ev) {
				game = new Game();
				//need to add player initilisation - Dialog boxes
				//first initilise the possible choices latter on
				Object[] numofplayers = {2,3,4,5,6};
				List<Person> personoptions = game.clonePeople();
				//creates a radio box containing the possible options
				//we use a Jpanel for display, and a buttongroup to maintain deselect
				JPanel choose = new JPanel();
				ButtonGroup personradio = new ButtonGroup();
				JRadioButton scarlett = new JRadioButton("Miss Scarlet");
				JRadioButton mustard = new JRadioButton("Colonel Mustard");
				JRadioButton white = new JRadioButton("Mrs White");
				JRadioButton green = new JRadioButton("Mr Green");
				JRadioButton peacock = new JRadioButton("Mrs Peacock");
				JRadioButton plum = new JRadioButton("Professor Plum");
				scarlett.setVisible(true);
				mustard.setVisible(true);
				white.setVisible(true);
				green.setVisible(true);
				peacock.setVisible(true);
				plum.setVisible(true);
				personradio.add(scarlett);
				personradio.add(mustard);
				personradio.add(white);
				personradio.add(green);
				personradio.add(peacock);
				personradio.add(plum);
				choose.add(scarlett);
				choose.add(mustard);
				choose.add(white);
				choose.add(green);
				choose.add(peacock);
				choose.add(plum);

				//finds out how many players will be playing
				int choice = (Integer)JOptionPane.showInputDialog(frame,
					    "Welcome to Cluedo! How many people would like to play?	",
					    "Welcome!",
					    JOptionPane.PLAIN_MESSAGE,
					    null,
					    numofplayers,
					    2);
				for(int i = 0; i<choice; i++) {
					//for each player, allows them to select a name
					String name = "";
					JTextField entername = new JTextField();
					int namechoice = JOptionPane.showConfirmDialog(frame,
							entername,
							"Enter your name",
							JOptionPane.PLAIN_MESSAGE);
					if(namechoice == JOptionPane.OK_OPTION) {
						name = entername.getText();
					}
                    //then allows each player to select a person
					JOptionPane.showConfirmDialog(frame,
							choose,
							"Select your character",
							JOptionPane.PLAIN_MESSAGE);
					//make the chosen radio button unvisable and create the new player
					if(scarlett.isSelected()) {
						scarlett.setVisible(false);
						game.createNewPlayer(name, personoptions.get(0));

					}
					if(mustard.isSelected()) {
						mustard.setVisible(false);
						game.createNewPlayer(name, personoptions.get(1));
					}
					if(white.isSelected()) {
						white.setVisible(false);
						game.createNewPlayer(name, personoptions.get(2));
					}
					if(green.isSelected()) {
						green.setVisible(false);
						game.createNewPlayer(name, personoptions.get(3));
					}
					if(peacock.isSelected()) {
						peacock.setVisible(false);
						game.createNewPlayer(name, personoptions.get(4));
					}
					if(plum.isSelected()) {
						plum.setVisible(false);
						game.createNewPlayer(name, personoptions.get(5));
					}

				}
				game.giveCards(game.allrooms, game.allweapons, game.allpersons);
                game.currentplayer = game.players.get(0);
                playernumber.setText(game.currentplayer.getName());
				redraw(frame);


			}
		});

        endgame.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent ev) {
				//currently just exits the game
				game = null; //resets the game, should remove everything
				System.exit(0);
			}
		});

        endturn.addActionListener(new ActionListener() {
     			public void actionPerformed(ActionEvent ev) {
     				//changes the current player
     				game.endTurn();
     				//skip through players who dont get a turn
     				while(!game.currentplayer.getCanPlay()) {
     					game.endTurn();
     				}
     				//draw all the correct information out about the player
     				playernumber.setText(game.currentplayer.getName());
     				movenumber.setText(game.currentplayer.getMovement() + "");
     				rpaneltext.setText("Known information\n");
     				rpaneltext.append("Rooms : ");
     				for(Room r : game.currentplayer.knownrooms) {
     					rpaneltext.append(r.getName() + " ");
     				}
     				rpaneltext.append("Weapons : ");
     				for(Weapon w : game.currentplayer.knownweapons) {
     					rpaneltext.append(w.getName() + " ");
     				}
     				rpaneltext.append("Persons : ");
     				for(Person p : game.currentplayer.knownpersons) {
     					rpaneltext.append(p.getName() + " ");
     				}
     			}
     	});

        //finally set the program to visable
        frame.setVisible(true);
	}

		private void redraw(JFrame frame) {
		JPanel drawing = new JPanel();
		int x = 25;
		int y = 24;
		JPanel[][] board = new JPanel[x][y];    
		drawing.setLayout(new GridLayout(x,y,1,1));

		for(int m = 0; m < x; m++) {
		   for(int n = 0; n < y; n++) {
		      board[m][n] = new JPanel();
		      drawing.add(board[m][n]);
		   }
		}
		
		for (int i = 0; i < x; i++) {
			for (int j = 0; j < y; j++) {
				Board board1 = game.getBoard();
				Location loc = board1.getLocation(i, j);
				
				if (!loc.getWeapons().isEmpty()) {
					ImageIcon icon = new ImageIcon(GUI.class.getResource("/assets/weapon.png"));
		            JLabel weapon = new JLabel(icon);
		            weapon.addMouseListener(new MouseAdapter() {
		            	@Override
		            	public void mouseClicked(MouseEvent e) {
		            		onCLick(e);
		            	}
		            });
		            board[i][j].add(weapon);
				}
				else if (!loc.getAccess()) {
					board[i][j].add(new JLabel(new ImageIcon(GUI.class.getResource("/assets/border.png"))));
					
				}
				else if (loc.getRoom()!=null) {
					
					ImageIcon icon = new ImageIcon(GUI.class.getResource("/assets/room.png"));
		            JLabel room = new JLabel(icon);
		            room.addMouseListener(new MouseAdapter() {
		            	@Override
		            	public void mouseClicked(MouseEvent e) {
		            		onCLick(e);
		            	}
		            });
		            board[i][j].add(room);
				}
				else if (loc.getIsDoor()) {
					ImageIcon icon = new ImageIcon(GUI.class.getResource("/assets/door.png"));
		            JLabel door = new JLabel(icon);
		            door.addMouseListener(new MouseAdapter() {
		            	@Override
		            	public void mouseClicked(MouseEvent e) {
		            		onCLick(e);
		            	}
		            });
		            board[i][j].add(door);
				}
				
				else if (!loc.getPersons().isEmpty()) {
					ImageIcon icon = new ImageIcon(GUI.class.getResource("/assets/person.png"));
		            JLabel person = new JLabel(icon);
		            person.addMouseListener(new MouseAdapter() {
		            	@Override
		            	public void mouseClicked(MouseEvent e) {
		            		onCLick(e);
		            	}

						
		            });
		            board[i][j].add(person);
				}
				else {
					ImageIcon icon = new ImageIcon(GUI.class.getResource("/assets/floor.png"));
		            JLabel floor = new JLabel(icon);
		            floor.addMouseListener(new MouseAdapter() {
		            	@Override
		            	public void mouseClicked(MouseEvent e) {
		            		onCLick(e);
		            	}
		            });
		            board[i][j].add(floor);
				}
			}
		}
		
		frame.getContentPane().add(drawing, BorderLayout.CENTER);
		frame.setVisible(true);
	}

	public void onClick(MouseEvent e) {}

	public static void main(String[] args) {
		new GUI();
	}
}
